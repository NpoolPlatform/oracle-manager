// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/oracle-manager/pkg/db/ent/reward"
	"github.com/google/uuid"
)

// RewardCreate is the builder for creating a Reward entity.
type RewardCreate struct {
	config
	mutation *RewardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *RewardCreate) SetCreatedAt(u uint32) *RewardCreate {
	rc.mutation.SetCreatedAt(u)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RewardCreate) SetNillableCreatedAt(u *uint32) *RewardCreate {
	if u != nil {
		rc.SetCreatedAt(*u)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RewardCreate) SetUpdatedAt(u uint32) *RewardCreate {
	rc.mutation.SetUpdatedAt(u)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RewardCreate) SetNillableUpdatedAt(u *uint32) *RewardCreate {
	if u != nil {
		rc.SetUpdatedAt(*u)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RewardCreate) SetDeletedAt(u uint32) *RewardCreate {
	rc.mutation.SetDeletedAt(u)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RewardCreate) SetNillableDeletedAt(u *uint32) *RewardCreate {
	if u != nil {
		rc.SetDeletedAt(*u)
	}
	return rc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (rc *RewardCreate) SetCoinTypeID(u uuid.UUID) *RewardCreate {
	rc.mutation.SetCoinTypeID(u)
	return rc
}

// SetDailyReward sets the "daily_reward" field.
func (rc *RewardCreate) SetDailyReward(u uint64) *RewardCreate {
	rc.mutation.SetDailyReward(u)
	return rc
}

// SetID sets the "id" field.
func (rc *RewardCreate) SetID(u uuid.UUID) *RewardCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RewardCreate) SetNillableID(u *uuid.UUID) *RewardCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// Mutation returns the RewardMutation object of the builder.
func (rc *RewardCreate) Mutation() *RewardMutation {
	return rc.mutation
}

// Save creates the Reward in the database.
func (rc *RewardCreate) Save(ctx context.Context) (*Reward, error) {
	var (
		err  error
		node *Reward
	)
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RewardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RewardCreate) SaveX(ctx context.Context) *Reward {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RewardCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RewardCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RewardCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if reward.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized reward.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := reward.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if reward.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized reward.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := reward.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		if reward.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized reward.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := reward.DefaultDeletedAt()
		rc.mutation.SetDeletedAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		if reward.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized reward.DefaultID (forgotten import ent/runtime?)")
		}
		v := reward.DefaultID()
		rc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RewardCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reward.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reward.updated_at"`)}
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Reward.deleted_at"`)}
	}
	if _, ok := rc.mutation.CoinTypeID(); !ok {
		return &ValidationError{Name: "coin_type_id", err: errors.New(`ent: missing required field "Reward.coin_type_id"`)}
	}
	if _, ok := rc.mutation.DailyReward(); !ok {
		return &ValidationError{Name: "daily_reward", err: errors.New(`ent: missing required field "Reward.daily_reward"`)}
	}
	return nil
}

func (rc *RewardCreate) sqlSave(ctx context.Context) (*Reward, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rc *RewardCreate) createSpec() (*Reward, *sqlgraph.CreateSpec) {
	var (
		_node = &Reward{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reward.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: reward.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: reward.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: reward.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: reward.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: reward.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := rc.mutation.DailyReward(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reward.FieldDailyReward,
		})
		_node.DailyReward = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reward.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RewardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rc *RewardCreate) OnConflict(opts ...sql.ConflictOption) *RewardUpsertOne {
	rc.conflict = opts
	return &RewardUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rc *RewardCreate) OnConflictColumns(columns ...string) *RewardUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RewardUpsertOne{
		create: rc,
	}
}

type (
	// RewardUpsertOne is the builder for "upsert"-ing
	//  one Reward node.
	RewardUpsertOne struct {
		create *RewardCreate
	}

	// RewardUpsert is the "OnConflict" setter.
	RewardUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RewardUpsert) SetCreatedAt(v uint32) *RewardUpsert {
	u.Set(reward.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RewardUpsert) UpdateCreatedAt() *RewardUpsert {
	u.SetExcluded(reward.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RewardUpsert) AddCreatedAt(v uint32) *RewardUpsert {
	u.Add(reward.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RewardUpsert) SetUpdatedAt(v uint32) *RewardUpsert {
	u.Set(reward.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RewardUpsert) UpdateUpdatedAt() *RewardUpsert {
	u.SetExcluded(reward.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RewardUpsert) AddUpdatedAt(v uint32) *RewardUpsert {
	u.Add(reward.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RewardUpsert) SetDeletedAt(v uint32) *RewardUpsert {
	u.Set(reward.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RewardUpsert) UpdateDeletedAt() *RewardUpsert {
	u.SetExcluded(reward.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RewardUpsert) AddDeletedAt(v uint32) *RewardUpsert {
	u.Add(reward.FieldDeletedAt, v)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *RewardUpsert) SetCoinTypeID(v uuid.UUID) *RewardUpsert {
	u.Set(reward.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *RewardUpsert) UpdateCoinTypeID() *RewardUpsert {
	u.SetExcluded(reward.FieldCoinTypeID)
	return u
}

// SetDailyReward sets the "daily_reward" field.
func (u *RewardUpsert) SetDailyReward(v uint64) *RewardUpsert {
	u.Set(reward.FieldDailyReward, v)
	return u
}

// UpdateDailyReward sets the "daily_reward" field to the value that was provided on create.
func (u *RewardUpsert) UpdateDailyReward() *RewardUpsert {
	u.SetExcluded(reward.FieldDailyReward)
	return u
}

// AddDailyReward adds v to the "daily_reward" field.
func (u *RewardUpsert) AddDailyReward(v uint64) *RewardUpsert {
	u.Add(reward.FieldDailyReward, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Reward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(reward.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RewardUpsertOne) UpdateNewValues() *RewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(reward.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Reward.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *RewardUpsertOne) Ignore() *RewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RewardUpsertOne) DoNothing() *RewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RewardCreate.OnConflict
// documentation for more info.
func (u *RewardUpsertOne) Update(set func(*RewardUpsert)) *RewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RewardUpsertOne) SetCreatedAt(v uint32) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RewardUpsertOne) AddCreatedAt(v uint32) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateCreatedAt() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RewardUpsertOne) SetUpdatedAt(v uint32) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RewardUpsertOne) AddUpdatedAt(v uint32) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateUpdatedAt() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RewardUpsertOne) SetDeletedAt(v uint32) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RewardUpsertOne) AddDeletedAt(v uint32) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateDeletedAt() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *RewardUpsertOne) SetCoinTypeID(v uuid.UUID) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateCoinTypeID() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetDailyReward sets the "daily_reward" field.
func (u *RewardUpsertOne) SetDailyReward(v uint64) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetDailyReward(v)
	})
}

// AddDailyReward adds v to the "daily_reward" field.
func (u *RewardUpsertOne) AddDailyReward(v uint64) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.AddDailyReward(v)
	})
}

// UpdateDailyReward sets the "daily_reward" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateDailyReward() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateDailyReward()
	})
}

// Exec executes the query.
func (u *RewardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RewardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RewardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RewardUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RewardUpsertOne.ID is not supported by MySQL driver. Use RewardUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RewardUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RewardCreateBulk is the builder for creating many Reward entities in bulk.
type RewardCreateBulk struct {
	config
	builders []*RewardCreate
	conflict []sql.ConflictOption
}

// Save creates the Reward entities in the database.
func (rcb *RewardCreateBulk) Save(ctx context.Context) ([]*Reward, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reward, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RewardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RewardCreateBulk) SaveX(ctx context.Context) []*Reward {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RewardCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RewardCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reward.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RewardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rcb *RewardCreateBulk) OnConflict(opts ...sql.ConflictOption) *RewardUpsertBulk {
	rcb.conflict = opts
	return &RewardUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rcb *RewardCreateBulk) OnConflictColumns(columns ...string) *RewardUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RewardUpsertBulk{
		create: rcb,
	}
}

// RewardUpsertBulk is the builder for "upsert"-ing
// a bulk of Reward nodes.
type RewardUpsertBulk struct {
	create *RewardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Reward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(reward.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RewardUpsertBulk) UpdateNewValues() *RewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(reward.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reward.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *RewardUpsertBulk) Ignore() *RewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RewardUpsertBulk) DoNothing() *RewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RewardCreateBulk.OnConflict
// documentation for more info.
func (u *RewardUpsertBulk) Update(set func(*RewardUpsert)) *RewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RewardUpsertBulk) SetCreatedAt(v uint32) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RewardUpsertBulk) AddCreatedAt(v uint32) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateCreatedAt() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RewardUpsertBulk) SetUpdatedAt(v uint32) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RewardUpsertBulk) AddUpdatedAt(v uint32) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateUpdatedAt() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RewardUpsertBulk) SetDeletedAt(v uint32) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RewardUpsertBulk) AddDeletedAt(v uint32) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateDeletedAt() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *RewardUpsertBulk) SetCoinTypeID(v uuid.UUID) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateCoinTypeID() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetDailyReward sets the "daily_reward" field.
func (u *RewardUpsertBulk) SetDailyReward(v uint64) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetDailyReward(v)
	})
}

// AddDailyReward adds v to the "daily_reward" field.
func (u *RewardUpsertBulk) AddDailyReward(v uint64) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.AddDailyReward(v)
	})
}

// UpdateDailyReward sets the "daily_reward" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateDailyReward() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateDailyReward()
	})
}

// Exec executes the query.
func (u *RewardUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RewardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RewardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RewardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
