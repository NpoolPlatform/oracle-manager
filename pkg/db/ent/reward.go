// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/oracle-manager/pkg/db/ent/reward"
	"github.com/google/uuid"
)

// Reward is the model entity for the Reward schema.
type Reward struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// DailyReward holds the value of the "daily_reward" field.
	DailyReward uint64 `json:"daily_reward,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reward) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case reward.FieldCreatedAt, reward.FieldUpdatedAt, reward.FieldDeletedAt, reward.FieldDailyReward:
			values[i] = new(sql.NullInt64)
		case reward.FieldID, reward.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Reward", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reward fields.
func (r *Reward) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reward.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case reward.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = uint32(value.Int64)
			}
		case reward.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = uint32(value.Int64)
			}
		case reward.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = uint32(value.Int64)
			}
		case reward.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				r.CoinTypeID = *value
			}
		case reward.FieldDailyReward:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field daily_reward", values[i])
			} else if value.Valid {
				r.DailyReward = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Reward.
// Note that you need to call Reward.Unwrap() before calling this method if this Reward
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reward) Update() *RewardUpdateOne {
	return (&RewardClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Reward entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reward) Unwrap() *Reward {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reward is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reward) String() string {
	var builder strings.Builder
	builder.WriteString("Reward(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", r.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", r.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", r.DeletedAt))
	builder.WriteString(", coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", r.CoinTypeID))
	builder.WriteString(", daily_reward=")
	builder.WriteString(fmt.Sprintf("%v", r.DailyReward))
	builder.WriteByte(')')
	return builder.String()
}

// Rewards is a parsable slice of Reward.
type Rewards []*Reward

func (r Rewards) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
