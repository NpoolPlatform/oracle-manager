// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/oracle-manager/pkg/db/ent/currency"
	"github.com/google/uuid"
)

// Currency is the model entity for the Currency schema.
type Currency struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// PriceVsUsdt holds the value of the "price_vs_usdt" field.
	PriceVsUsdt uint64 `json:"price_vs_usdt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Currency) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case currency.FieldCreatedAt, currency.FieldUpdatedAt, currency.FieldDeletedAt, currency.FieldPriceVsUsdt:
			values[i] = new(sql.NullInt64)
		case currency.FieldID, currency.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Currency", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Currency fields.
func (c *Currency) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case currency.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case currency.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = uint32(value.Int64)
			}
		case currency.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = uint32(value.Int64)
			}
		case currency.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = uint32(value.Int64)
			}
		case currency.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				c.CoinTypeID = *value
			}
		case currency.FieldPriceVsUsdt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price_vs_usdt", values[i])
			} else if value.Valid {
				c.PriceVsUsdt = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Currency.
// Note that you need to call Currency.Unwrap() before calling this method if this Currency
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Currency) Update() *CurrencyUpdateOne {
	return (&CurrencyClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Currency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Currency) Unwrap() *Currency {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Currency is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Currency) String() string {
	var builder strings.Builder
	builder.WriteString("Currency(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", c.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", c.DeletedAt))
	builder.WriteString(", coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CoinTypeID))
	builder.WriteString(", price_vs_usdt=")
	builder.WriteString(fmt.Sprintf("%v", c.PriceVsUsdt))
	builder.WriteByte(')')
	return builder.String()
}

// Currencies is a parsable slice of Currency.
type Currencies []*Currency

func (c Currencies) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
