// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/oracle-manager/pkg/db/ent/currency"
	"github.com/NpoolPlatform/oracle-manager/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/oracle-manager/pkg/db/ent/reward"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCurrency = "Currency"
	TypeReward   = "Reward"
)

// CurrencyMutation represents an operation that mutates the Currency nodes in the graph.
type CurrencyMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *uint32
	addcreated_at        *int32
	updated_at           *uint32
	addupdated_at        *int32
	deleted_at           *uint32
	adddeleted_at        *int32
	app_id               *uuid.UUID
	coin_type_id         *uuid.UUID
	price_vs_usdt        *uint64
	addprice_vs_usdt     *int64
	app_price_vs_usdt    *uint64
	addapp_price_vs_usdt *int64
	over_percent         *int32
	addover_percent      *int32
	currency_method      *string
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*Currency, error)
	predicates           []predicate.Currency
}

var _ ent.Mutation = (*CurrencyMutation)(nil)

// currencyOption allows management of the mutation configuration using functional options.
type currencyOption func(*CurrencyMutation)

// newCurrencyMutation creates new mutation for the Currency entity.
func newCurrencyMutation(c config, op Op, opts ...currencyOption) *CurrencyMutation {
	m := &CurrencyMutation{
		config:        c,
		op:            op,
		typ:           TypeCurrency,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCurrencyID sets the ID field of the mutation.
func withCurrencyID(id uuid.UUID) currencyOption {
	return func(m *CurrencyMutation) {
		var (
			err   error
			once  sync.Once
			value *Currency
		)
		m.oldValue = func(ctx context.Context) (*Currency, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Currency.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCurrency sets the old Currency of the mutation.
func withCurrency(node *Currency) currencyOption {
	return func(m *CurrencyMutation) {
		m.oldValue = func(context.Context) (*Currency, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CurrencyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CurrencyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Currency entities.
func (m *CurrencyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CurrencyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CurrencyMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Currency.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CurrencyMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CurrencyMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CurrencyMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CurrencyMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CurrencyMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CurrencyMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CurrencyMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CurrencyMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CurrencyMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CurrencyMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CurrencyMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CurrencyMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CurrencyMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CurrencyMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CurrencyMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *CurrencyMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CurrencyMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CurrencyMutation) ResetAppID() {
	m.app_id = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CurrencyMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CurrencyMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CurrencyMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetPriceVsUsdt sets the "price_vs_usdt" field.
func (m *CurrencyMutation) SetPriceVsUsdt(u uint64) {
	m.price_vs_usdt = &u
	m.addprice_vs_usdt = nil
}

// PriceVsUsdt returns the value of the "price_vs_usdt" field in the mutation.
func (m *CurrencyMutation) PriceVsUsdt() (r uint64, exists bool) {
	v := m.price_vs_usdt
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceVsUsdt returns the old "price_vs_usdt" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldPriceVsUsdt(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceVsUsdt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceVsUsdt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceVsUsdt: %w", err)
	}
	return oldValue.PriceVsUsdt, nil
}

// AddPriceVsUsdt adds u to the "price_vs_usdt" field.
func (m *CurrencyMutation) AddPriceVsUsdt(u int64) {
	if m.addprice_vs_usdt != nil {
		*m.addprice_vs_usdt += u
	} else {
		m.addprice_vs_usdt = &u
	}
}

// AddedPriceVsUsdt returns the value that was added to the "price_vs_usdt" field in this mutation.
func (m *CurrencyMutation) AddedPriceVsUsdt() (r int64, exists bool) {
	v := m.addprice_vs_usdt
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriceVsUsdt resets all changes to the "price_vs_usdt" field.
func (m *CurrencyMutation) ResetPriceVsUsdt() {
	m.price_vs_usdt = nil
	m.addprice_vs_usdt = nil
}

// SetAppPriceVsUsdt sets the "app_price_vs_usdt" field.
func (m *CurrencyMutation) SetAppPriceVsUsdt(u uint64) {
	m.app_price_vs_usdt = &u
	m.addapp_price_vs_usdt = nil
}

// AppPriceVsUsdt returns the value of the "app_price_vs_usdt" field in the mutation.
func (m *CurrencyMutation) AppPriceVsUsdt() (r uint64, exists bool) {
	v := m.app_price_vs_usdt
	if v == nil {
		return
	}
	return *v, true
}

// OldAppPriceVsUsdt returns the old "app_price_vs_usdt" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldAppPriceVsUsdt(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppPriceVsUsdt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppPriceVsUsdt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppPriceVsUsdt: %w", err)
	}
	return oldValue.AppPriceVsUsdt, nil
}

// AddAppPriceVsUsdt adds u to the "app_price_vs_usdt" field.
func (m *CurrencyMutation) AddAppPriceVsUsdt(u int64) {
	if m.addapp_price_vs_usdt != nil {
		*m.addapp_price_vs_usdt += u
	} else {
		m.addapp_price_vs_usdt = &u
	}
}

// AddedAppPriceVsUsdt returns the value that was added to the "app_price_vs_usdt" field in this mutation.
func (m *CurrencyMutation) AddedAppPriceVsUsdt() (r int64, exists bool) {
	v := m.addapp_price_vs_usdt
	if v == nil {
		return
	}
	return *v, true
}

// ResetAppPriceVsUsdt resets all changes to the "app_price_vs_usdt" field.
func (m *CurrencyMutation) ResetAppPriceVsUsdt() {
	m.app_price_vs_usdt = nil
	m.addapp_price_vs_usdt = nil
}

// SetOverPercent sets the "over_percent" field.
func (m *CurrencyMutation) SetOverPercent(i int32) {
	m.over_percent = &i
	m.addover_percent = nil
}

// OverPercent returns the value of the "over_percent" field in the mutation.
func (m *CurrencyMutation) OverPercent() (r int32, exists bool) {
	v := m.over_percent
	if v == nil {
		return
	}
	return *v, true
}

// OldOverPercent returns the old "over_percent" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldOverPercent(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOverPercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOverPercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverPercent: %w", err)
	}
	return oldValue.OverPercent, nil
}

// AddOverPercent adds i to the "over_percent" field.
func (m *CurrencyMutation) AddOverPercent(i int32) {
	if m.addover_percent != nil {
		*m.addover_percent += i
	} else {
		m.addover_percent = &i
	}
}

// AddedOverPercent returns the value that was added to the "over_percent" field in this mutation.
func (m *CurrencyMutation) AddedOverPercent() (r int32, exists bool) {
	v := m.addover_percent
	if v == nil {
		return
	}
	return *v, true
}

// ResetOverPercent resets all changes to the "over_percent" field.
func (m *CurrencyMutation) ResetOverPercent() {
	m.over_percent = nil
	m.addover_percent = nil
}

// SetCurrencyMethod sets the "currency_method" field.
func (m *CurrencyMutation) SetCurrencyMethod(s string) {
	m.currency_method = &s
}

// CurrencyMethod returns the value of the "currency_method" field in the mutation.
func (m *CurrencyMutation) CurrencyMethod() (r string, exists bool) {
	v := m.currency_method
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencyMethod returns the old "currency_method" field's value of the Currency entity.
// If the Currency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyMutation) OldCurrencyMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrencyMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrencyMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencyMethod: %w", err)
	}
	return oldValue.CurrencyMethod, nil
}

// ResetCurrencyMethod resets all changes to the "currency_method" field.
func (m *CurrencyMutation) ResetCurrencyMethod() {
	m.currency_method = nil
}

// Where appends a list predicates to the CurrencyMutation builder.
func (m *CurrencyMutation) Where(ps ...predicate.Currency) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CurrencyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Currency).
func (m *CurrencyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CurrencyMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, currency.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, currency.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, currency.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, currency.FieldAppID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, currency.FieldCoinTypeID)
	}
	if m.price_vs_usdt != nil {
		fields = append(fields, currency.FieldPriceVsUsdt)
	}
	if m.app_price_vs_usdt != nil {
		fields = append(fields, currency.FieldAppPriceVsUsdt)
	}
	if m.over_percent != nil {
		fields = append(fields, currency.FieldOverPercent)
	}
	if m.currency_method != nil {
		fields = append(fields, currency.FieldCurrencyMethod)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CurrencyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case currency.FieldCreatedAt:
		return m.CreatedAt()
	case currency.FieldUpdatedAt:
		return m.UpdatedAt()
	case currency.FieldDeletedAt:
		return m.DeletedAt()
	case currency.FieldAppID:
		return m.AppID()
	case currency.FieldCoinTypeID:
		return m.CoinTypeID()
	case currency.FieldPriceVsUsdt:
		return m.PriceVsUsdt()
	case currency.FieldAppPriceVsUsdt:
		return m.AppPriceVsUsdt()
	case currency.FieldOverPercent:
		return m.OverPercent()
	case currency.FieldCurrencyMethod:
		return m.CurrencyMethod()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CurrencyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case currency.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case currency.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case currency.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case currency.FieldAppID:
		return m.OldAppID(ctx)
	case currency.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case currency.FieldPriceVsUsdt:
		return m.OldPriceVsUsdt(ctx)
	case currency.FieldAppPriceVsUsdt:
		return m.OldAppPriceVsUsdt(ctx)
	case currency.FieldOverPercent:
		return m.OldOverPercent(ctx)
	case currency.FieldCurrencyMethod:
		return m.OldCurrencyMethod(ctx)
	}
	return nil, fmt.Errorf("unknown Currency field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CurrencyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case currency.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case currency.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case currency.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case currency.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case currency.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case currency.FieldPriceVsUsdt:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceVsUsdt(v)
		return nil
	case currency.FieldAppPriceVsUsdt:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppPriceVsUsdt(v)
		return nil
	case currency.FieldOverPercent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverPercent(v)
		return nil
	case currency.FieldCurrencyMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencyMethod(v)
		return nil
	}
	return fmt.Errorf("unknown Currency field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CurrencyMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, currency.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, currency.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, currency.FieldDeletedAt)
	}
	if m.addprice_vs_usdt != nil {
		fields = append(fields, currency.FieldPriceVsUsdt)
	}
	if m.addapp_price_vs_usdt != nil {
		fields = append(fields, currency.FieldAppPriceVsUsdt)
	}
	if m.addover_percent != nil {
		fields = append(fields, currency.FieldOverPercent)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CurrencyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case currency.FieldCreatedAt:
		return m.AddedCreatedAt()
	case currency.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case currency.FieldDeletedAt:
		return m.AddedDeletedAt()
	case currency.FieldPriceVsUsdt:
		return m.AddedPriceVsUsdt()
	case currency.FieldAppPriceVsUsdt:
		return m.AddedAppPriceVsUsdt()
	case currency.FieldOverPercent:
		return m.AddedOverPercent()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CurrencyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case currency.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case currency.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case currency.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case currency.FieldPriceVsUsdt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriceVsUsdt(v)
		return nil
	case currency.FieldAppPriceVsUsdt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAppPriceVsUsdt(v)
		return nil
	case currency.FieldOverPercent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOverPercent(v)
		return nil
	}
	return fmt.Errorf("unknown Currency numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CurrencyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CurrencyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CurrencyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Currency nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CurrencyMutation) ResetField(name string) error {
	switch name {
	case currency.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case currency.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case currency.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case currency.FieldAppID:
		m.ResetAppID()
		return nil
	case currency.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case currency.FieldPriceVsUsdt:
		m.ResetPriceVsUsdt()
		return nil
	case currency.FieldAppPriceVsUsdt:
		m.ResetAppPriceVsUsdt()
		return nil
	case currency.FieldOverPercent:
		m.ResetOverPercent()
		return nil
	case currency.FieldCurrencyMethod:
		m.ResetCurrencyMethod()
		return nil
	}
	return fmt.Errorf("unknown Currency field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CurrencyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CurrencyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CurrencyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CurrencyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CurrencyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CurrencyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CurrencyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Currency unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CurrencyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Currency edge %s", name)
}

// RewardMutation represents an operation that mutates the Reward nodes in the graph.
type RewardMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	coin_type_id    *uuid.UUID
	daily_reward    *uint64
	adddaily_reward *int64
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Reward, error)
	predicates      []predicate.Reward
}

var _ ent.Mutation = (*RewardMutation)(nil)

// rewardOption allows management of the mutation configuration using functional options.
type rewardOption func(*RewardMutation)

// newRewardMutation creates new mutation for the Reward entity.
func newRewardMutation(c config, op Op, opts ...rewardOption) *RewardMutation {
	m := &RewardMutation{
		config:        c,
		op:            op,
		typ:           TypeReward,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRewardID sets the ID field of the mutation.
func withRewardID(id uuid.UUID) rewardOption {
	return func(m *RewardMutation) {
		var (
			err   error
			once  sync.Once
			value *Reward
		)
		m.oldValue = func(ctx context.Context) (*Reward, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reward.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReward sets the old Reward of the mutation.
func withReward(node *Reward) rewardOption {
	return func(m *RewardMutation) {
		m.oldValue = func(context.Context) (*Reward, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RewardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RewardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Reward entities.
func (m *RewardMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RewardMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RewardMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Reward.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RewardMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RewardMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Reward entity.
// If the Reward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *RewardMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *RewardMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RewardMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RewardMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RewardMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Reward entity.
// If the Reward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *RewardMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *RewardMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RewardMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RewardMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RewardMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Reward entity.
// If the Reward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *RewardMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *RewardMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RewardMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *RewardMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *RewardMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Reward entity.
// If the Reward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *RewardMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetDailyReward sets the "daily_reward" field.
func (m *RewardMutation) SetDailyReward(u uint64) {
	m.daily_reward = &u
	m.adddaily_reward = nil
}

// DailyReward returns the value of the "daily_reward" field in the mutation.
func (m *RewardMutation) DailyReward() (r uint64, exists bool) {
	v := m.daily_reward
	if v == nil {
		return
	}
	return *v, true
}

// OldDailyReward returns the old "daily_reward" field's value of the Reward entity.
// If the Reward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardMutation) OldDailyReward(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDailyReward is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDailyReward requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDailyReward: %w", err)
	}
	return oldValue.DailyReward, nil
}

// AddDailyReward adds u to the "daily_reward" field.
func (m *RewardMutation) AddDailyReward(u int64) {
	if m.adddaily_reward != nil {
		*m.adddaily_reward += u
	} else {
		m.adddaily_reward = &u
	}
}

// AddedDailyReward returns the value that was added to the "daily_reward" field in this mutation.
func (m *RewardMutation) AddedDailyReward() (r int64, exists bool) {
	v := m.adddaily_reward
	if v == nil {
		return
	}
	return *v, true
}

// ResetDailyReward resets all changes to the "daily_reward" field.
func (m *RewardMutation) ResetDailyReward() {
	m.daily_reward = nil
	m.adddaily_reward = nil
}

// Where appends a list predicates to the RewardMutation builder.
func (m *RewardMutation) Where(ps ...predicate.Reward) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RewardMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Reward).
func (m *RewardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RewardMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, reward.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, reward.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, reward.FieldDeletedAt)
	}
	if m.coin_type_id != nil {
		fields = append(fields, reward.FieldCoinTypeID)
	}
	if m.daily_reward != nil {
		fields = append(fields, reward.FieldDailyReward)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RewardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reward.FieldCreatedAt:
		return m.CreatedAt()
	case reward.FieldUpdatedAt:
		return m.UpdatedAt()
	case reward.FieldDeletedAt:
		return m.DeletedAt()
	case reward.FieldCoinTypeID:
		return m.CoinTypeID()
	case reward.FieldDailyReward:
		return m.DailyReward()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RewardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reward.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case reward.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case reward.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case reward.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case reward.FieldDailyReward:
		return m.OldDailyReward(ctx)
	}
	return nil, fmt.Errorf("unknown Reward field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RewardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reward.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case reward.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case reward.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case reward.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case reward.FieldDailyReward:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDailyReward(v)
		return nil
	}
	return fmt.Errorf("unknown Reward field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RewardMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, reward.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, reward.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, reward.FieldDeletedAt)
	}
	if m.adddaily_reward != nil {
		fields = append(fields, reward.FieldDailyReward)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RewardMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case reward.FieldCreatedAt:
		return m.AddedCreatedAt()
	case reward.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case reward.FieldDeletedAt:
		return m.AddedDeletedAt()
	case reward.FieldDailyReward:
		return m.AddedDailyReward()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RewardMutation) AddField(name string, value ent.Value) error {
	switch name {
	case reward.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case reward.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case reward.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case reward.FieldDailyReward:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDailyReward(v)
		return nil
	}
	return fmt.Errorf("unknown Reward numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RewardMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RewardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RewardMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Reward nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RewardMutation) ResetField(name string) error {
	switch name {
	case reward.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case reward.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case reward.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case reward.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case reward.FieldDailyReward:
		m.ResetDailyReward()
		return nil
	}
	return fmt.Errorf("unknown Reward field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RewardMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RewardMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RewardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RewardMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RewardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RewardMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RewardMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Reward unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RewardMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Reward edge %s", name)
}
